#!/usr/bin/env python3
"""
Script de diagn√≥stico completo para la c√°mara
Ayuda a identificar problemas de configuraci√≥n
"""

import os
import subprocess
import sys
import time

def run_command(command, description):
    """Ejecuta un comando y muestra el resultado"""
    print(f"\nüîç {description}")
    print(f"Comando: {command}")
    print("-" * 50)
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)
        
        if result.stdout:
            print("Salida est√°ndar:")
            print(result.stdout)
        
        if result.stderr:
            print("Errores:")
            print(result.stderr)
        
        print(f"C√≥digo de salida: {result.returncode}")
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚ùå Comando expir√≥ por tiempo")
        return False
    except Exception as e:
        print(f"‚ùå Error ejecutando comando: {e}")
        return False

def check_system_info():
    """Verifica informaci√≥n del sistema"""
    print("üöÄ DIAGN√ìSTICO DE C√ÅMARA - RASPBERRY PI")
    print("=" * 50)
    
    # Informaci√≥n del sistema
    run_command("uname -a", "Informaci√≥n del sistema")
    run_command("cat /proc/cpuinfo | grep Model", "Modelo de Raspberry Pi")
    run_command("cat /proc/version", "Versi√≥n del kernel")
    run_command("lsb_release -a", "Versi√≥n de la distribuci√≥n")

def check_camera_devices():
    """Verifica dispositivos de c√°mara"""
    print("\nüì∑ DISPOSITIVOS DE C√ÅMARA")
    print("=" * 30)
    
    # Listar dispositivos de video
    run_command("ls -la /dev/video*", "Dispositivos de video disponibles")
    
    # Informaci√≥n de dispositivos
    run_command("v4l2-ctl --list-devices", "Informaci√≥n de dispositivos V4L2")
    
    # Verificar permisos
    run_command("ls -la /dev/video0", "Permisos del primer dispositivo de video")
    
    # Verificar grupo video
    run_command("groups $USER", "Grupos del usuario actual")

def check_camera_modules():
    """Verifica m√≥dulos de c√°mara cargados"""
    print("\nüîß M√ìDULOS DE C√ÅMARA")
    print("=" * 25)
    
    # M√≥dulos cargados
    run_command("lsmod | grep -i camera", "M√≥dulos de c√°mara cargados")
    run_command("lsmod | grep -i v4l", "M√≥dulos V4L2 cargados")
    run_command("lsmod | grep -i uvc", "M√≥dulos UVC cargados")
    
    # Configuraci√≥n de m√≥dulos
    run_command("cat /etc/modules | grep -i camera", "M√≥dulos de c√°mara en /etc/modules")

def check_camera_processes():
    """Verifica procesos relacionados con c√°mara"""
    print("\n‚öôÔ∏è  PROCESOS DE C√ÅMARA")
    print("=" * 25)
    
    # Procesos activos
    run_command("ps aux | grep -i camera", "Procesos de c√°mara activos")
    run_command("ps aux | grep -i v4l", "Procesos V4L2 activos")
    
    # Puertos en uso
    run_command("netstat -tuln | grep -E ':(80|8080|5000)'", "Puertos web comunes")

def check_camera_config():
    """Verifica configuraci√≥n de c√°mara"""
    print("\n‚öôÔ∏è  CONFIGURACI√ìN DE C√ÅMARA")
    print("=" * 30)
    
    # Configuraci√≥n de boot
    run_command("cat /boot/config.txt | grep -i camera", "Configuraci√≥n de c√°mara en boot")
    
    # Configuraci√≥n de interfaces
    run_command("cat /boot/config.txt | grep -i enable", "Interfaces habilitadas")
    
    # Configuraci√≥n de GPU
    run_command("cat /boot/config.txt | grep -i gpu", "Configuraci√≥n de GPU")

def check_python_packages():
    """Verifica paquetes Python relacionados con c√°mara"""
    print("\nüêç PAQUETES PYTHON")
    print("=" * 20)
    
    # Verificar OpenCV
    run_command("python3 -c 'import cv2; print(f\"OpenCV versi√≥n: {cv2.__version__}\")'", "Versi√≥n de OpenCV")
    
    # Verificar picamera2
    run_command("python3 -c 'import picamera2; print(\"picamera2 disponible\")'", "picamera2 disponible")
    
    # Verificar numpy
    run_command("python3 -c 'import numpy; print(f\"NumPy versi√≥n: {numpy.__version__}\")'", "Versi√≥n de NumPy")

def test_camera_access():
    """Prueba acceso b√°sico a la c√°mara"""
    print("\nüß™ PRUEBA DE ACCESO")
    print("=" * 20)
    
    # Crear script de prueba temporal
    test_script = """
import cv2
import sys

print("Probando acceso a c√°mara...")
for i in range(5):
    print(f"Probando c√°mara {i}...")
    cap = cv2.VideoCapture(i)
    if cap.isOpened():
        print(f"  ‚úÖ C√°mara {i} abierta")
        ret, frame = cap.read()
        if ret:
            print(f"  ‚úÖ Frame le√≠do: {frame.shape}")
        else:
            print(f"  ‚ùå Error leyendo frame")
        cap.release()
    else:
        print(f"  ‚ùå No se pudo abrir c√°mara {i}")
"""
    
    with open("temp_test.py", "w") as f:
        f.write(test_script)
    
    # Ejecutar prueba
    run_command("python3 temp_test.py", "Prueba de acceso a c√°mara")
    
    # Limpiar
    os.remove("temp_test.py")

def check_network_cameras():
    """Verifica si hay c√°maras de red disponibles"""
    print("\nüåê C√ÅMARAS DE RED")
    print("=" * 20)
    
    # Verificar interfaces de red
    run_command("ip addr show", "Interfaces de red")
    
    # Verificar conectividad
    run_command("ping -c 3 8.8.8.8", "Prueba de conectividad")

def generate_report():
    """Genera un reporte de diagn√≥stico"""
    print("\nüìã REPORTE DE DIAGN√ìSTICO")
    print("=" * 30)
    
    report_file = f"camera_diagnostic_{time.strftime('%Y%m%d_%H%M%S')}.txt"
    
    print(f"üìÑ Generando reporte: {report_file}")
    print("\nüí° RECOMENDACIONES:")
    print("1. Verificar conexi√≥n f√≠sica de la c√°mara")
    print("2. Revisar permisos de usuario")
    print("3. Verificar drivers instalados")
    print("4. Comprobar configuraci√≥n de boot")
    print("5. Revisar logs del sistema")
    
    if os.path.exists("/var/log/syslog"):
        print("\nüìä √öltimos logs del sistema:")
        run_command("tail -20 /var/log/syslog | grep -i camera", "Logs recientes de c√°mara")

def main():
    """Funci√≥n principal"""
    try:
        check_system_info()
        check_camera_devices()
        check_camera_modules()
        check_camera_processes()
        check_camera_config()
        check_python_packages()
        test_camera_access()
        check_network_cameras()
        generate_report()
        
        print("\n‚úÖ Diagn√≥stico completado")
        print("üìö Revisa el reporte generado para m√°s detalles")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Diagn√≥stico interrumpido")
    except Exception as e:
        print(f"\nüí• Error durante diagn√≥stico: {e}")

if __name__ == "__main__":
    main() 