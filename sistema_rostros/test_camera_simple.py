#!/usr/bin/env python3
"""
Script simple para probar la c√°mara y diagnosticar problemas
"""
import subprocess
import time
import sys

def test_camera_simple():
    """Prueba simple de la c√°mara"""
    print("üß™ Probando c√°mara de manera simple...")
    
    # Comando simple para capturar un frame
    cmd = [
        "rpicam-vid",
        "-n", "-t", "2000",  # 2 segundos
        "--codec", "mjpeg",
        "-o", "test_frame.jpg",
        "--width", "640",
        "--height", "480"
    ]
    
    print(f"üì∑ Comando: {' '.join(cmd)}")
    
    try:
        # Ejecutar comando
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        
        print(f"‚úÖ Comando ejecutado")
        print(f"   ‚Ä¢ C√≥digo de salida: {result.returncode}")
        print(f"   ‚Ä¢ STDOUT: {result.stdout[:200]}...")
        print(f"   ‚Ä¢ STDERR: {result.stderr[:200]}...")
        
        # Verificar si se cre√≥ la imagen
        import os
        if os.path.exists("test_frame.jpg"):
            size = os.path.getsize("test_frame.jpg")
            print(f"‚úÖ Imagen creada: test_frame.jpg ({size} bytes)")
        else:
            print("‚ùå No se cre√≥ la imagen")
            
    except subprocess.TimeoutExpired:
        print("‚ùå Comando expir√≥ por timeout")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_camera_stream():
    """Prueba streaming de la c√°mara"""
    print("\nüé• Probando streaming de la c√°mara...")
    
    cmd = [
        "rpicam-vid",
        "-n", "-t", "3000",  # 3 segundos
        "--codec", "mjpeg",
        "-o", "-",  # Salida a stdout
        "--width", "640",
        "--height", "480"
    ]
    
    print(f"üìπ Comando streaming: {' '.join(cmd)}")
    
    try:
        # Ejecutar comando con timeout
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        start_time = time.time()
        data_received = 0
        frames_received = 0
        
        while time.time() - start_time < 3:  # 3 segundos m√°ximo
            try:
                chunk = proc.stdout.read(1024)
                if chunk:
                    data_received += len(chunk)
                    # Buscar frames JPEG
                    if b"\xff\xd8" in chunk:
                        frames_received += 1
                else:
                    break
            except:
                break
        
        proc.terminate()
        proc.wait()
        
        print(f"‚úÖ Streaming completado")
        print(f"   ‚Ä¢ Datos recibidos: {data_received} bytes")
        print(f"   ‚Ä¢ Frames detectados: {frames_received}")
        
    except Exception as e:
        print(f"‚ùå Error en streaming: {e}")

def test_camera_parameters():
    """Prueba diferentes par√°metros de la c√°mara"""
    print("\nüîß Probando diferentes par√°metros...")
    
    # Listar c√°maras disponibles
    try:
        result = subprocess.run(["rpicam-vid", "--list-cameras"], 
                              capture_output=True, text=True, timeout=5)
        print("üìã C√°maras disponibles:")
        print(result.stdout)
    except Exception as e:
        print(f"‚ùå Error listando c√°maras: {e}")
    
    # Probar con par√°metros m√°s simples
    print("\nüì∑ Probando con par√°metros m√≠nimos...")
    cmd = [
        "rpicam-vid",
        "-n", "-t", "1000",
        "-o", "test_minimal.jpg"
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        print(f"‚úÖ Comando m√≠nimo ejecutado")
        print(f"   ‚Ä¢ C√≥digo: {result.returncode}")
        print(f"   ‚Ä¢ Error: {result.stderr[:200]}...")
        
        import os
        if os.path.exists("test_minimal.jpg"):
            size = os.path.getsize("test_minimal.jpg")
            print(f"‚úÖ Imagen m√≠nima creada: {size} bytes")
        else:
            print("‚ùå No se cre√≥ imagen m√≠nima")
            
    except Exception as e:
        print(f"‚ùå Error en comando m√≠nimo: {e}")

def main():
    """Funci√≥n principal"""
    print("üîç Diagn√≥stico completo de la c√°mara")
    print("=" * 50)
    
    test_camera_simple()
    test_camera_stream()
    test_camera_parameters()
    
    print("\n" + "=" * 50)
    print("üéØ Diagn√≥stico completado")
    print("\nüí° Recomendaciones:")
    print("   1. Verifica que la c√°mara est√© conectada")
    print("   2. Revisa los permisos de /dev/video*")
    print("   3. Prueba con par√°metros m√°s simples")
    print("   4. Verifica la versi√≥n de libraspberrypi-bin")

if __name__ == "__main__":
    main() 